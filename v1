game.Loaded:Wait()
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = game.Players.LocalPlayer
local monsterSpawns = game.workspace:FindFirstChild("MonsterSpawns")
local CryptBotPath = "CryptBot"

-- Destroy triggers in MonsterSpawns if found
if monsterSpawns then
    local triggers = monsterSpawns:FindFirstChild("Triggers")
    if triggers then
        triggers:Destroy()
        print("Monster spawn triggers destroyed.")
    else
        print("No triggers found in MonsterSpawns.")
    end
else
    print("No MonsterSpawns found in workspace.")
end
local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.F1 then
        -- Delete the CryptBot file if it exists
        if isfile(CryptBotPath) then
            delfile(CryptBotPath)
  player:Kick("CryptBot disabled.")
            print("CryptBot file deleted.")
        end

        -- Kick the player with the message
      
    end
end)

-- Ensure PlayerGui is loaded properly
local playerGui = player:WaitForChild("PlayerGui", 10)  -- Wait for up to 10 seconds

if not playerGui then
    warn("PlayerGui not found after waiting.")
    return  -- Exit if PlayerGui is not found
end

-- Wait for StartMenu to be available, skip if not present
local startMenu = playerGui:WaitForChild("StartMenu", 10)

if startMenu then
    -- Send the mouse click events only after StartMenu is loaded
   

    task.wait(2) -- Optional wait, adjust if necessary
 VirtualInputManager:SendMouseButtonEvent(109, 1194, 0, true, game, 0)  -- Mouse button press
    VirtualInputManager:SendMouseButtonEvent(109, 1194, 0, false, game, 0) -- Mouse button release
else
    warn("StartMenu not found.")
end


local RunService = game:GetService("RunService")
local waypoints = {
    CFrame.new(-314.148254, 550.453735, -86.120636),
    CFrame.new(32.0048981, 482.455475, -820.521118),
    CFrame.new(417.6521, 249.303101, -970.287231),
    CFrame.new(553.268433, 178.716843, -1175.84766), -- Special waypoint
    CFrame.new(-314.148254, 550.453735, -86.120636),
}
task.wait(2)
local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
local currentWaypoint = 1
local loopPath = false
local speed = 120

local function setupCharacter()
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rightLeg = character:FindFirstChild("Right Leg")
        if rightLeg then
            rightLeg.Name = "YYY Right Leg"
        end
        if humanoid then
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            task.wait(0.05)
            RunService.Heartbeat:Connect(function()
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                        humanoidRootPart.Velocity = Vector3.zero
                    end
                end
            end)
        end
    end
end

local function fireClickDetectors()
    local radius = 30
    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and (part.Position - humanoidRootPart.Position).Magnitude <= radius then
            local clickDetector = part:FindFirstChildOfClass("ClickDetector")
            if clickDetector then
                fireclickdetector(clickDetector)
            end
        end
    end
end

local function moveToNextWaypoint()
    local targetCFrame = waypoints[currentWaypoint]
    local direction = (targetCFrame.Position - humanoidRootPart.Position).unit
    local distance = (targetCFrame.Position - humanoidRootPart.Position).Magnitude
    
    if distance < 1 then
        if currentWaypoint == 4 then
            task.spawn(function()
                local stopTime = tick() + 5
                while tick() < stopTime do
                    fireClickDetectors()
                    humanoidRootPart.CFrame = CFrame.new(
                        humanoidRootPart.Position.X,
                        targetCFrame.Position.Y,
                        humanoidRootPart.Position.Z
                    )
                    task.wait(0.1)
                end
            end)
            task.wait(5)
        end
        currentWaypoint = currentWaypoint + 1
        if currentWaypoint > #waypoints then
            if loopPath then
                currentWaypoint = 1
            else
                -- Server hopping logic
                local replicatedStorage = game:GetService("ReplicatedStorage")
                local serverInfo = replicatedStorage:WaitForChild("ServerInfo")
                local triedServers = {}
                local currentServerJobId = game.JobId

                local function joinNextServer()
                    local validServers = {}
                    for _, serverFolder in pairs(serverInfo:GetChildren()) do
                        if serverFolder.Name ~= currentServerJobId and not table.find(triedServers, serverFolder.Name) then
                            table.insert(validServers, serverFolder.Name)
                        end
                    end
                    if #validServers == 0 then
                        triedServers = {}  -- Reset tried servers
                        for _, serverFolder in pairs(serverInfo:GetChildren()) do
                            if serverFolder.Name ~= currentServerJobId then
                                table.insert(validServers, serverFolder.Name)
                            end
                        end
                    end

                    if #validServers > 0 then
                        local nextServer = validServers[1]
                        table.insert(triedServers, nextServer)
                        print("Attempting to join server: " .. nextServer)
                        
                        game:GetService("ReplicatedStorage").Requests.JoinPublicServer:FireServer(nextServer)

                        return true
                    else
                        print("No available servers found.")
                        return false
                    end
                end

                -- Lock character in place to prevent falling while server hopping
                local lockedPosition = humanoidRootPart.Position
                humanoidRootPart.Anchored = true

                -- Keep trying to server hop until game.JobId actually changes, retry every 5 seconds
                while true do
                    local oldJobId = game.JobId
                    joinNextServer()
                    
                    -- Wait until the server actually changes
                    local startTime = tick()
                    while game.JobId == oldJobId do
                        if tick() - startTime > 5 then  -- Retry every 5 seconds
                            print("Server hop not successful yet, retrying...")
                            break
                        end
                        task.wait(1)
                    end

                    -- Keep character in place to prevent falling
                    humanoidRootPart.CFrame = CFrame.new(lockedPosition)
                end
            end
        end
        return
    end
    
    local step = math.min(distance, speed * RunService.Heartbeat:Wait())
    humanoidRootPart.CFrame = humanoidRootPart.CFrame + direction * step
end

setupCharacter()
while true do
    moveToNextWaypoint()
    if currentWaypoint > #waypoints then
        break
    end
end

-- Keybind for F1 to disable CryptBot and kick the player
